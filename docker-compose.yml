

services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    image: sage-backend:latest
    container_name: sage-backend
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://sage_user:${POSTGRES_PASSWORD:-sage_pass}@postgres:5432/sage_db

      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0

      # ChromaDB Configuration
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000

      # OpenAI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      OPENAI_TEMPERATURE: ${OPENAI_TEMPERATURE:-0.3}

      # Healthcare Model Configuration
      SAGE_HEALTHCARE_MODE: ${SAGE_HEALTHCARE_MODE:-true}
      DEFAULT_HEALTHCARE_MODEL: ${DEFAULT_HEALTHCARE_MODEL:-gpt-4o-mini}

      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-jwt_secret_change_in_production}
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7

      # Encryption Configuration
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-encryption_key_change_in_production}

      # Application Configuration
      APP_NAME: "Sage"
      APP_VERSION: "1.0.0"
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # CORS Configuration
      CORS_ORIGINS: '["http://localhost:3000", "http://frontend:3000"]'

      # Safety Configuration
      ENABLE_CRISIS_DETECTION: true
      ENABLE_CONTENT_FILTERING: true
      ENABLE_SAFETY_LOGGING: true

      # Privacy Configuration
      DATA_RETENTION_DAYS: 90
      ENABLE_AUDIT_LOGGING: true
      GDPR_COMPLIANCE: true
      HIPAA_COMPLIANCE: true

    depends_on:
      - postgres
      - chromadb
      - redis

    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./backend/logs:/app/logs

    networks:
      - sage-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Healthcare Frontend for Sage
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.healthcare
    image: sage-frontend:latest
    container_name: sage-frontend
    ports:
      - "3000:3000"
    environment:
      # Healthcare Frontend Configuration
      NODE_ENV: production
      REACT_APP_NAME: "Sage Healthcare AI"
      REACT_APP_API_URL: http://sage-backend:8000
      REACT_APP_ENVIRONMENT: healthcare

      # Healthcare Features
      REACT_APP_ENABLE_CRISIS_DETECTION: true
      REACT_APP_ENABLE_MEDICAL_DISCLAIMER: true
      REACT_APP_ENABLE_ANALYTICS: false
      REACT_APP_ENABLE_TRACKING: false

      # Security Configuration
      REACT_APP_ENABLE_SIGNUP: false
      REACT_APP_ENABLE_LOGIN_FORM: true
      REACT_APP_DEFAULT_USER_ROLE: patient

    # No volumes needed for static React build

    depends_on:
      - backend

    networks:
      - sage-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: sage-postgres
    environment:
      POSTGRES_DB: sage_db
      POSTGRES_USER: sage_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sage_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sage_user -d sage_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  chromadb:
    image: chromadb/chroma:latest
    container_name: sage-chromadb
    ports:
      - "8001:8000"
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
      CHROMA_SERVER_CORS_ALLOW_ORIGINS: '["http://localhost:8000", "http://backend:8000"]'
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - sage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: sage-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development utilities
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@sage.local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - sage-network
    profiles:
      - dev-tools

volumes:
  postgres_data:
  chromadb_data:
  redis_data:

networks:
  sage-network:
    driver: bridge